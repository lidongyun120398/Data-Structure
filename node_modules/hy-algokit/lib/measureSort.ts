type SortAlgorithm = (arr: number[]) => number[]

export function measureSort(sortAlgorithm: SortAlgorithm, n: number = 100000) {
  const arr = Array.from({ length: n }, () => Math.floor(Math.random() * n));

  const startTime = performance.now();
  sortAlgorithm(arr);
  const endTime = performance.now();

  const timeElapsed = (endTime - startTime).toFixed(2);

  console.log(`使用 ${sortAlgorithm.name} 算法 排序 ${n} 个元素 消耗时间为 ${timeElapsed} 毫秒.`);
}

export function compareSort(sortFunctions: SortAlgorithm[], dataCount: number = 10000) {
  console.log(`${dataCount}数据量，${sortFunctions.length}个算法，正在疯狂排序中ing`)

  const data = new Array(dataCount)
  for (let i = 0; i < dataCount; i++) {
    data[i] = Math.floor(Math.random() * dataCount * 10)
  }

  const results: { name: string; time: number }[] = []
  for (const sortFn of sortFunctions) {
    const startTime = Date.now()
    sortFn(data.slice())
    const endTime = Date.now()
    results.push({
      name: sortFn.name,
      time: endTime - startTime
    })
  }

  results.sort((a, b) => a.time - b.time)
  console.log(`Sorting ${dataCount} numbers:`)
  for (const result of results) {
    console.log(`${result.name.padEnd(15)}:${result.time}ms`)
  }
}

export function swap(arr: number[], i: number, j: number) {
  const temp = arr[i]
  arr[i] = arr[j]
  arr[j] = temp
}

// 判断数组是否有序
export function isSorted(arr: number[]): boolean {
  for (let i = 0; i < arr.length - 1; i++) {
    if (arr[i] > arr[i + 1]) {
      return false;
    }
  }
  return true;
}

export function testSort(sortFn: SortAlgorithm) {
  const arr = Array.from({ length: 10 }, () => {
    return Math.floor(Math.random() * 200)
  })

  console.log('排序前原始数组:', arr)
  const newArr = sortFn(arr)
  console.log('排序后有序数组:', newArr)
  console.log('是否是正确的排序?', isSorted(newArr))
}
